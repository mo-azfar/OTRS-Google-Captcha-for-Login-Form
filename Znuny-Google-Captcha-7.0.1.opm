<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Znuny-Google-Captcha</Name>
    <Version>7.0.1</Version>
    <Vendor>mo-azfar</Vendor>
    <URL>https://github.com/mo-azfar/OTRS-Google-Captcha-for-Login-Form</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <ChangeLog Date="2023-08-21 00:00:01" Version="7.0.1">New package.</ChangeLog>
    <Description Lang="en">Google reCaptcha at Znuny agent portal and customer portal (login form).</Description>
    <Framework>7.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">
        &lt;br&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        You are about to install the package Znuny-Google-Captcha. Make sure cpan module &lt;b&gt;Captcha::reCAPTCHA::V2&lt;/b&gt; is installed first.&lt;br/&gt;&lt;br/&gt;Check &lt;a href='https://github.com/mo-azfar/OTRS-Google-Captcha-for-Login-Form' target='_blank'&gt;README&lt;/a&gt;&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
		DO RESTART YOUR WEBSERVER AFTERWARDS
		&lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;
    </IntroInstall>
    <BuildDate>2023-08-21 17:08:05</BuildDate>
    <BuildHost>app.myserver.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/XML/ZZZGoogleCaptcha.xml" Permission="660" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxvdHJzX2NvbmZpZyB2ZXJzaW9uPSIyLjAiIGluaXQ9IkNvbmZpZyI+DQogICAgPFNldHRpbmcgTmFtZT0iRnJvbnRlbmQ6Ok91dHB1dDo6RmlsdGVyRWxlbWVudFBvc3QjIyNTaG93R29vZ2xlQ2FwdGNoYSIgUmVxdWlyZWQ9IjAiIFZhbGlkPSIxIj4NCiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+TW9kdWxlIHRvIHNob3cgZ29vZ2xlIGNhcGN0aGEuPC9EZXNjcmlwdGlvbj4NCiAgICAgICAgPE5hdmlnYXRpb24+RnJvbnRlbmQ6OkJhc2U6Ok91dHB1dEZpbHRlcjwvTmF2aWdhdGlvbj4NCiAgICAgICAgPFZhbHVlPg0KICAgICAgICAgICAgPEhhc2g+DQogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJNb2R1bGUiPktlcm5lbDo6T3V0cHV0OjpIVE1MOjpGaWx0ZXJFbGVtZW50UG9zdDo6U2hvd0dvb2dsZUNhcHRjaGE8L0l0ZW0+DQogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJUZW1wbGF0ZXMiPg0KICAgICAgICAgICAgICAgICAgICA8SGFzaD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTG9naW4iPjA8L0l0ZW0+DQoJCQkJCQk8SXRlbSBLZXk9IkN1c3RvbWVyTG9naW4iPjA8L0l0ZW0+DQogICAgICAgICAgICAgICAgICAgIDwvSGFzaD4NCiAgICAgICAgICAgICAgICA8L0l0ZW0+DQogICAgICAgICAgICA8L0hhc2g+DQogICAgICAgIDwvVmFsdWU+DQogICAgPC9TZXR0aW5nPg0KCTxTZXR0aW5nIE5hbWU9Ikdvb2dsZUNhcHRjaGE6OlNpdGVLZXkiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+DQogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkRlZmluZXMgdGhlIGdvb2dsZSByZWNhcHRjaGEgc2l0ZSBrZXk8L0Rlc2NyaXB0aW9uPg0KICAgICAgICA8TmF2aWdhdGlvbj5Hb29nbGVDYXB0Y2hhPC9OYXZpZ2F0aW9uPg0KICAgICAgICA8VmFsdWU+DQogICAgICAgICAgICA8SXRlbSBWYWx1ZVR5cGU9IlN0cmluZyIgVmFsdWVSZWdleD0iIj5TSVRFX0tFWV9IRVJFPC9JdGVtPg0KICAgICAgICA8L1ZhbHVlPg0KICAgIDwvU2V0dGluZz4NCiAgICA8U2V0dGluZyBOYW1lPSJHb29nbGVDYXB0Y2hhOjpTZWNyZXRLZXkiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+DQogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkRlZmluZXMgdGhlIGdvb2dsZSByZWNhcHRjaGEgc2VjcmV0IGtleTwvRGVzY3JpcHRpb24+DQogICAgICAgIDxOYXZpZ2F0aW9uPkdvb2dsZUNhcHRjaGE8L05hdmlnYXRpb24+DQogICAgICAgIDxWYWx1ZT4NCiAgICAgICAgICAgIDxJdGVtIFZhbHVlVHlwZT0iU3RyaW5nIiBWYWx1ZVJlZ2V4PSIiPlNFQ1JFVF9LRVlfSEVSRTwvSXRlbT4NCiAgICAgICAgPC9WYWx1ZT4NCiAgICA8L1NldHRpbmc+DQo8L290cnNfY29uZmlnPg0K</File>
        <File Location="Custom/Kernel/Output/HTML/FilterElementPost/ShowGoogleCaptcha.pm" Permission="660" Encode="Base64">IyAtLQojIENvcHlyaWdodCAoQykgMjAyMyBtby1hemZhcixodHRwczovL2dpdGh1Yi5jb20vbW8tYXpmYXIKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpPdXRwdXQ6OkhUTUw6OkZpbHRlckVsZW1lbnRQb3N0OjpTaG93R29vZ2xlQ2FwdGNoYTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCm91ciBAT2JqZWN0RGVwZW5kZW5jaWVzID0gKAogICAgJ0tlcm5lbDo6Q29uZmlnJywKICAgICdLZXJuZWw6Ok91dHB1dDo6SFRNTDo6TGF5b3V0JywKICAgICdLZXJuZWw6OlN5c3RlbTo6R3JvdXAnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpXZWI6OlJlcXVlc3QnLAopOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KDphbGwpOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJENvbmZpZ09iamVjdCAgICAgICAgICAgICAgICAgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpOwogICAgI215ICRQYXJhbU9iamVjdCAgICAgICAgICAgICAgICAgICAgID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcpOwoJCgkjIC0tCgkjIEFnZW50IEdvb2dsZSBDYXB0Y2hhCgkjIC0tCglpZiAoICRQYXJhbXtUZW1wbGF0ZUZpbGV9IGVxICdMb2dpbicpCiAgICB7CgkJdXNlIENhcHRjaGE6OnJlQ0FQVENIQTo6VjI7CiAgICAgICAgbXkgJFNpdGVLZXkgPSAkQ29uZmlnT2JqZWN0LT5HZXQoJ0dvb2dsZUNhcHRjaGE6OlNpdGVLZXknKTsJCQogICAgICAgIG15ICRyYyA9IENhcHRjaGE6OnJlQ0FQVENIQTo6VjItPm5ldzsKCQlteSAkY2FwdGNoYWZpZWxkID0gJHJjLT5odG1sKCRTaXRlS2V5LCB7IHRoZW1lID0+ICdkYXJrJyB9LCB7IHNpemUgPT4gJ2NvbXBhY3QnIH0sIHsgdHlwZSA9PiAnaW1hZ2UnIH0pOwoJCW15ICRGaWVsZCA9IHFxfgoJCTxkaXY+JGNhcHRjaGFmaWVsZDwvZGl2PgoJCX47CgkgICAgICAgICAgICAKCQlteSAkU2VhcmNoRmllbGQgPSBxdW90ZW1ldGEgIjxkaXYgY2xhc3M9XCJGaWVsZFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBpZD1cIkxvZ2luQnV0dG9uXCIgY2xhc3M9XCJidG4tbWFpbiBidG4tcHJpbWFyeVwiIHZhbHVlPVwiTG9naW5cIiBkaXNhYmxlZD1cImRpc2FibGVkXCI+PHNwYW4+TG9naW48L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IjsKCQoJCW15ICRSZXR1cm5GaWVsZCA9IHFxfjxkaXYgY2xhc3M9IkZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGlkPSJMb2dpbkJ1dHRvbiIgY2xhc3M9ImJ0bi1tYWluIGJ0bi1wcmltYXJ5IiB2YWx1ZT0iTG9naW4iIGRpc2FibGVkPSJkaXNhYmxlZCI+PHNwYW4+TG9naW48L3NwYW4+PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJfjsKCQoJCSNzZWFyY2ggYW5kIHJlcGxhY2UJIAoJCSR7ICRQYXJhbXtEYXRhfSB9ID1+IHN7JFNlYXJjaEZpZWxkfXskRmllbGQgJFJldHVybkZpZWxkfTsKCQkKICAgIH0gIAoJIyAtLQoJCgkjIC0tCgkjIEN1c3RvbWVyIEdvb2dsZSBDYXB0Y2hhCgkjIC0tCglpZiAoICRQYXJhbXtUZW1wbGF0ZUZpbGV9IGVxICdDdXN0b21lckxvZ2luJykKICAgIHsKCQl1c2UgQ2FwdGNoYTo6cmVDQVBUQ0hBOjpWMjsKICAgICAgICBteSAkU2l0ZUtleSA9ICRDb25maWdPYmplY3QtPkdldCgnR29vZ2xlQ2FwdGNoYTo6U2l0ZUtleScpOwkJCiAgICAgICAgbXkgJHJjID0gQ2FwdGNoYTo6cmVDQVBUQ0hBOjpWMi0+bmV3OwoJCW15ICRjYXB0Y2hhZmllbGQgPSAkcmMtPmh0bWwoJFNpdGVLZXksIHsgdGhlbWUgPT4gJ2RhcmsnIH0sIHsgc2l6ZSA9PiAnY29tcGFjdCcgfSwgeyB0eXBlID0+ICdpbWFnZScgfSk7CgkJbXkgJEZpZWxkID0gcXF+CgkJPGRpdj4kY2FwdGNoYWZpZWxkPC9kaXY+CgkJfjsKCSAgICAgICAgICAgIAoJCW15ICRTZWFyY2hGaWVsZCA9IHF1b3RlbWV0YSAiPGRpdj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIkxvZyBJblwiIGNsYXNzPVwiYnRuLW1haW4gYnRuLXByaW1hcnlcIiBkaXNhYmxlZD1cImRpc2FibGVkXCI+TG9nIEluPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4iOwoJCgkJbXkgJFJldHVybkZpZWxkID0gcXF+PGRpdj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgdmFsdWU9IkxvZyBJbiIgY2xhc3M9ImJ0bi1tYWluIGJ0bi1wcmltYXJ5IiBkaXNhYmxlZD0iZGlzYWJsZWQiPkxvZyBJbjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CgkJfjsKCQoJCSNzZWFyY2ggYW5kIHJlcGxhY2UJIAoJCSR7ICRQYXJhbXtEYXRhfSB9ID1+IHN7JFNlYXJjaEZpZWxkfXskRmllbGQgJFJldHVybkZpZWxkfTsKCQkKICAgIH0gIAoJIyAtLQoJCiAgICByZXR1cm4gMTsKfQoKMTsK</File>
        <File Location="Custom/Kernel/System/Web/InterfaceAgent.pm" Permission="660" Encode="Base64"></File>
        <File Location="Custom/Kernel/System/Web/InterfaceCustomer.pm" Permission="660" Encode="Base64"></File>
    </Filelist>
</otrs_package>